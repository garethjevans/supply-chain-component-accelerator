#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all, expects="1+"

#@ load("resource_types.lib.yml", "resource_types")
#@ load("resources.lib.yml", "resources")
#@ load("jobs.lib.yml", "jobs")
#@ load("@ytt:template", "template")
#@ load("@ytt:struct", "struct")

#! Pipeline starts
---
resource_types:
- #@ template.replace(resource_types.common_types())

resources:
- #@ template.replace(resources.common_resources())
- #@ template.replace(resources.build_pkg_source())
- #@ template.replace(resources.semver())
- #@ template.replace(resources.chat())
- #@ template.replace(resources.mr())
- name: builder-task
  type: registry-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/krashed843/ubuntu-curl-kubectl
    tag: latest
- name: kustomize-task
  type: registry-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/line/kubectl-kustomize
    tag: latest
- name: carvel-kbld-release
  type: github-release
  icon: github
  source:
    access_token: #@ "((" + data.values.project + "/github.token))"
    owner: vmware-tanzu
    repository: carvel-kbld

jobs:
- name: set-pipeline
  plan:
  - in_parallel:
    - get: build-and-package
      trigger: true
    - get: ytt-release
    - get: builder-task
  - task: generate-pipeline
    image: builder-task
    config:
      platform: linux
      inputs:
      - name: build-and-package
      - name: ytt-release
      outputs:
      - name: pipeline
      run:
        path: build-and-package/ci/template/setup-in-runway.sh
  - set_pipeline: self
    file: pipeline/pipeline.yml

- #@ template.replace(jobs.test(False))
- #@ template.replace(jobs.test(True))

- #@ template.replace(jobs.validate(False))
- #@ template.replace(jobs.validate(True))

- #@ template.replace(jobs.build(False))
- #@ template.replace(jobs.build(True))

- #@ template.replace(jobs.renovate())