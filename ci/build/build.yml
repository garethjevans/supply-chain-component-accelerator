#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all, expects="1+"

#@ load("resource_types.lib.yml", "resource_types")
#@ load("resources.lib.yml", "resources")
#@ load("@ytt:template", "template")
#@ load("@ytt:struct", "struct")

#! Pipeline starts
---
resource_types:
- #@ template.replace(resource_types.common_types())

resources:
- #@ template.replace(resources.common_resources())
- #@ template.replace(resources.build_pkg_source())
- #@ template.replace(resources.semver())
- name: builder-task
  type: registry-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/krashed843/ubuntu-curl-kubectl
    tag: latest
- name: kustomize-task
  type: registry-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/line/kubectl-kustomize
    tag: latest
- name: carvel-kbld-release
  type: github-release
  icon: github
  source:
    access_token: #@ "((" + data.values.project + "/github.token))"
    owner: vmware-tanzu
    repository: carvel-kbld
- name: buildinfo
  source: null
  type: build-info

jobs:
- name: set-pipeline
  plan:
  - in_parallel:
    - get: build-and-package
      trigger: true
    - get: ytt-release
    - get: builder-task
  - task: generate-pipeline
    image: builder-task
    config:
      platform: linux
      inputs:
      - name: build-and-package
      - name: ytt-release
      outputs:
      - name: pipeline
      run:
        path: build-and-package/ci/template/setup-in-runway.sh
  - set_pipeline: self
    file: pipeline/pipeline.yml

- name: test
  plan:
  - in_parallel:
    - get: build-and-package
      trigger: true
      passed: [set-pipeline]
    - get: repo
      trigger: true
  - task: test-golang
    file: build-and-package/ci/tasks/run-tests.yaml

- name: validate-config
  plan:
  - in_parallel:
    - get: build-and-package
      trigger: true
      passed: [test]
    - get: repo
      trigger: true
      passed: [test]
    - get: kustomize-task
  - task: validate-config
    image: kustomize-task
    config:
      inputs:
        - name: build-and-package
        - name: repo
        - name: kustomize-task
      platform: linux
      run:
        path: build-and-package/ci/tasks/validate-config.sh

- name: build
  plan:
  - in_parallel:
    - get: build-and-package
      passed: [validate-config]
      trigger: true
    - get: yq-release
      params:
        globs:
        - yq_linux_amd64
    - get: ytt-release
    - get: carvel-kapp-release
    - get: carvel-kbld-release
    - get: builder-task
    - get: repo
      passed: [validate-config]
      trigger: true
    - put: buildinfo
    - put: version
      params: {pre: alpha}
  - load_var: next-version
    file: version/version
  - load_var: repo-commit-digest
    file: repo/.git/ref
  - task: build-app
    image: builder-task
    privileged: true
    config:
      platform: linux
      inputs:
      - name: build-and-package
      - name: repo
      - name: yq-release
      - name: ytt-release
      - name: carvel-kapp-release
      - name: carvel-kbld-release
      outputs:
      - name: manifests
      run: 
        user: root
        path: build-and-package/ci/build/build-app.sh
      params:
        PROJECT: #@ data.values.project
        BUILD_VERSION: ((.:next-version))
        REPO_COMMIT: ((.:repo-commit-digest))
        REGISTRY_HOST: dev.registry.tanzu.vmware.com
        REGISTRY_PROJECT: supply-chain-choreographer/cartographer-v2/catalog
        LEVER_CONFIG: ((lever.prod-kubeconfig-yaml))
        OFFICIAL: "true"
        PUBLISH: "true"
